plugins {
    id 'java'
    id 'distribution' // 배포 파일 생성을 위한 plugin
}

group = 'org.samsung'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // junit - test framework
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // dagger2 - DI framework
    // 2.43 version 부터는 java 11 support
    implementation 'com.google.dagger:dagger:2.42'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.42'

    // log4j2 - logging framework
    implementation platform('org.apache.logging.log4j:log4j-bom:2.24.0') // latest version 이 java 8 support
    implementation 'org.apache.logging.log4j:log4j-api:${log4j-api.version}'
    runtimeOnly 'org.apache.logging.log4j:log4j-core' // The logging implementation (i.e., Log4j Core)
//    runtimeOnly 'org.apache.logging.log4j:log4j-layout-template-json' // Log4j JSON-encoding support
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl' // SLF4J-to-Log4j bridge - sshj 에서 사용

    // console progressbar library
    implementation 'me.tongfei:progressbar:0.9.5' // 0.10.x version 부터는 java 9 support

    // hibernate - ORM framework
    // 5.6 version is compatible with Java 8, JPA 2.2, Jakarta Persistence 3.0
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'

    // google guava (util library)
    implementation("com.google.guava:guava:33.3.1-jre")

    // picoli (CLI library)
    implementation 'info.picocli:picocli:4.7.6'

    // sshj (ssh library)
    implementation 'com.hierynomus:sshj:0.39.0'
    implementation 'org.slf4j:slf4j-api:2.0.0' // sshj 에서 사용


    // TODO bootstrap할 때, properties 파일을 통해 hibernate.cfg.xml을 불러오거나, DataSource class를 통해 bootstrap하기.
    //  이 때, hibernate.cfg.xml 파일을 읽는다면 절대 경로로 읽지말고 classpath에서 읽도록 하기.
    // TODO JDBC 및 다른 hibernate library 추가 필요
    
    // TODO java print library (table 등등)
}

// Specify java version
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

test {
    useJUnitPlatform()
}

jar {
    archiveBaseName.set('command-line') // 고정된 jar 파일 명 설정
    archiveVersion.set('') // 버전 번호 포함하지 않음 (빈 값으로 설정)

    // -cp를 사용하지 않고, java -jar 사용 시 필요
//    manifest {
//        attributes(
//                'Main-Class': 'com.samsung.main.AppMain'
//        )
//    }

    // Note 외부 라이브러리 의존성 추가. 1개의 fat jar 생성 시 사용
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distributions {
    main {
        contents {
            // dependencies -> /lib
            from { configurations.runtimeClasspath } {
                into 'lib'
            }

            // src -> /src
            from('src') {
                into 'src'
                exclude '**/resources/**' // resources 폴더는 복사하지 않음
                exclude '**/test/**' // test 폴더는 복사하지 않음
            }

            // application.properties -> /config
            from('src/main/resources/application.properties') {
                into 'config'
            }

            // script -> /.
            from('script') {
                into '.'
            }

            // jar -> /.
            from(jar) {
                into '.'
            }
        }
    }
}